#include <altivec.h>
#include <stdint.h>

// This routine assumes data is vector aligned and N >= 96 floats
// Sums an array of floats using Altivec vector instructions

#define VEC_SIZE 4
#define BLOCK_FLOATS (VEC_SIZE * 8) // 8 vectors per block
#define BLOCK_BYTES (BLOCK_FLOATS * sizeof(float))

float vec_sum(float *data, unsigned int N) {
    // Ensure at least 96 floats
    if (N < 96) return 0.0f;

    vector float sum[8];
    for (int i = 0; i < 8; ++i)
        sum[i] = vec_splats(0.0f);

    unsigned int blocks = N / BLOCK_FLOATS;
    unsigned int tail = N % BLOCK_FLOATS;

    // Main vectorized sum loop
    for (unsigned int b = 0; b < blocks; ++b) {
        for (int i = 0; i < 8; ++i) {
            vector float v = vec_ld(i * VEC_SIZE * sizeof(float), data);
            sum[i] = vec_add(sum[i], v);
        }
        data += BLOCK_FLOATS;
    }

    // Sum all vector registers down to one vector
    vector float total = sum[0];
    for (int i = 1; i < 8; ++i)
        total = vec_add(total, sum[i]);

    // Sum across vector elements
    total = vec_add(total, vec_sld(total, total, 4));
    total = vec_add(total, vec_sld(total, total, 8));

    union {
        vector float v;
        float f[VEC_SIZE];
    } u;
    vec_st(total, 0, &u.v);

    float final_sum = u.f[0];

    // Handle tail elements (not covered by vector loop)
    for (unsigned int i = 0; i < tail; ++i)
        final_sum += *data++;

    return final_sum;
}
